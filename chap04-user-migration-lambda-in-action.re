= 実践ユーザー移行

//abstract{

//}


=={sec-ext} ユーザー移行Lambdaトリガーのアーキテクチャ


こんな感じになるよ

[Lambdaあって ]

Cognitoはエンドユーザーからサインインを受けたとき、そのユーザーがユーザーディレクトリ内で見つからなければユーザー移行用のLambdaを呼び出します。  
ユーザー移行用のLambdaの実装は開発者に委ねられています。基本的には次の2つの機能を実装します。
1. 既存ユーザーがUserPoolに初めてサインインした場合、移行前のユーザー認証基盤に代わりにログインし、ユーザー情報を取得してUserPoolに返却する
2. 移行していない既存ユーザーがUserPoolにパスワードリセットをリクエストしたとき、ユーザーの代わりに既存のユーザー認証基盤にパスワードリセットをリクエストする。

設計上の注意点として、移行前のユーザー認証基盤とUserPoolのユーザー情報、ログインエイリアス、パスワード制約などを整合させることが挙げられます。  
例えば移行前のユーザー認証基盤ではパスワードは6文字以内だったのが、UserPoolでは8文字以内に設定していた場合、6文字のパスワードを設定しているユーザーはUserPoolに作成されません。エンドユーザーからは、サインインが何度試しても失敗するように見えてしまいます。  
UserPoolのプロパティを移行前のユーザー認証基盤と突合し、テストケースを広く取って予防するようにしましょう。

なお、移行前のユーザー認証基盤を外部サービスの認証のためにOIDCなどで公開している場合、UserPoolが移行前のユーザー認証基盤と同じIDトークンを返すことは当然できません。  
移行前後のIDトークンを外部サービスの側で紐付ける必要が出てきます。第5章を参考にしてください。


=={sec-ext} ユーザー移行Lambdaトリガーの開発

* Lambdaだよ
* ロールの設定がいるよ。画面でもいいかも
* CFn効かないよ

=={sec-ext} ユーザー移行Lambdaトリガー以外に必要な機能
# Draft
ユーザー移行と同時に、ユーザー認証基盤を参照する処理の修正が必要と考えられます。
ユーザー移行で並走期間を設けるかどうかで対応が大きく別れます。

ユーザー登録 → 現在利用しているユーザー登録用のエンドポイントで、UserPoolにサインアップするように修正が必要です。
ユーザー移行の方法によっては、ユーザーのサインアップ時に既存のユーザー認証基盤にユーザーが存在するかどうかをチェックする必要が出てきます。

ログイン → UserPoolにログインするように修正が必要です。アプリで直接UserPoolを参照する場合と、APIが裏側でUserPoolを利用する場合があります。

ログアウト → おなじ

パスワードリセット → いろいろ

あとはログイン情報の編集とか


