= ユーザー移行の基本

//abstract{
既存のユーザー認証基盤をUserPoolで置き換えるには、ユーザーデータの移行とユーザー認証基盤を参照する処理の修正の2つの対応が必要です。
本章では、まずユーザーデータの移行についてどんな方法があり、どのように選ぶのが良いかを述べます。続いて、ユーザー認証基盤を参照する処理の対応のポイントに触れます。

UserPoolへのユーザー移行にはいくつか方法があります。具体的にどんな方法か、どちらを選ぶべきかについて紹介します。  

//}


=={sec-ext} ユーザー移行の2つの方針
# Draft
一斉移行と順次移行があります。

=== 一斉移行

=== 順次移行



=={sec-ext} ユーザー移行の実装方法

=== CSVファイルからのユーザーのインポート
所定の形式のCSVファイルから、UserPoolにユーザーをインポートすることができます。ただし、パスワードだけはインポートすることができません。  
公式ドキュメントにあるとおり、UserPoolではパスワード（のハッシュ）のインポートがサポート外のためです。そのため、CSVファイルからインポートされたユーザーはパスワードリセットを行う必要があります。

余談ですが、CSVのインポート時の...


=== ユーザー移行Lambdaトリガー
初回ログイン時にAWS Lambdaがユーザーに代わって移行前のユーザー認証基盤にログインし、取得したログイン情報をUserPoolに渡すやり方です。  
パスリセも。


=== APIを用いたユーザー移行
CognitoのAPIを利用し、新規作成時同様にユーザーを作成します。



=={sec-ext} ユーザー移行方法の選び方
# Draft

外部連携サービス濃霧
パスリセの有無
クライアント対応の有無
工数、理解


FI使ってるならユーザー移行Lamndaトリガーのみ。
それ以外にもCognitoのSub自体をユーザーIDにしている場合とか
というか、両方のログイン情報を紐付ける必要がある場合
もともとのIDでSAMLやっているとか？この辺表現を磨く必要がある

移行前のユーザー認証基盤が外部サービスとログイン情報を共有していない場合は、エンドユーザー・クライアントアプリケーションへの負荷や工数の負荷で判断することになります。  
エンドユーザーに対してパスワードリセットが必要な案内を出せる場合、CSVファイルからユーザーをインポートするので問題ありません。  
エンドユーザーに対してパスワードリセットを要求できない場合、ユーザー移行Lambdaトリガーを利用したユーザー移行を検討しましょう。以下のような対応が必要です。  


=={sec-ext} ユーザー認証基盤を参照する処理
# Draft
ユーザー移行と同時に、ユーザー認証基盤を参照する処理の修正が必要と考えられます。
ユーザー移行で並走期間を設けるかどうかで対応が大きく別れます。

ユーザー登録 → 現在利用しているユーザー登録用のエンドポイントで、UserPoolにサインアップするように修正が必要です。
ユーザー移行の方法によっては、ユーザーのサインアップ時に既存のユーザー認証基盤にユーザーが存在するかどうかをチェックする必要が出てきます。

ログイン → UserPoolにログインするように修正が必要です。アプリで直接UserPoolを参照する場合と、APIが裏側でUserPoolを利用する場合があります。

ログアウト → おなじ

パスワードリセット → いろいろ

あとはログイン情報の編集とか

