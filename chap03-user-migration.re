= ユーザー移行

//abstract{
batch importと、ユーザー移行Lambdaの2種類がある
//}

=={sec-ext} 2つの方法


まとめると:
* ユーザー移行後にユーザーのパスワードリセットが許可される場合 → batch importでOK
* シームレスに移行する必要がある場合 → 

どの方法を用いるかは、ユーザー移行の要件によって変わってきます。
1. ユーザー移行のタイミングで、全ユーザーにパスワードリセットを依頼しても構わない
2. ユーザー情報をOIDCのフローを利用して外部サービスに提供している

どちらの要件も不要な場合は、単に同じIDのユーザーを作成し、かつ登録されているメアドなどにパスリセのメールを送ればいいだけ
パスリセが不可能な場合はユーザー移行Lambdaになる。
（ユーザーを心配させたくないケースなど）
更に、外部サービス連携をしている場合、新旧のIDを連携するためのプロセスが必要になります。詳しくは次の章で。


=== ユーザー移行Lamndaトリガーによるユーザー移行

要するに、移行前のユーザーディレクトリにアカウントのあるユーザーが移行後のUserPoolにログインしてきた際に、
UserPoolがユーザーの代わりに受け取ってIDとパスワードで移行前のユーザーディレクトリにログインして、必要なユーザー情報を設定するための機能。


* ユーザー移行Lambdaの実装
    * 
    * 
* UserPoolへのユーザー移行Lambdaの設定

（場合による）
* クライアント側の改修（）


=== CSVファイルからのユーザー移行

* CSVファイルの作成スクリプト
* エンドユーザーへの告知


TODO:
batch importの正式名称

